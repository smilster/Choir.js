%%%%%%%%
%% octave script to generate instruments objects from file structure
clear all;

%%
% useful bash and ffmpeg stuff to preprocessing samples
% replace hastag by s (sharp)
%for f in *.mp3; do; d=$(echo $f | awk -F '.' '{print $1}' | sed 's/s/#/g'); echo \"$d\"\: \"$f\",; done
%
% suppose samples are store in BACKUP folder, ffmpeg can cut beginning of sample (e.g. -ss 0.2 = 200ms) and create a fade in of e.g. 50ms (d=0.05)
% result is saved to . folder
%for f in BACKUP/*.mp3; do fout=$(echo $f | awk -F '/' '{print $2}'); ffmpeg -i $f -ss 0.2 -af "afade=t=in:st=0:d=0.05" $fout; done
%


function main()
  %  get parent folder name where this script (mfile) is stored
  [fullPath,~,~] = fileparts(mfilename('fullpath'));
  [~,parentFolder,~] = fileparts(fullPath);

  % output String will be rwirrten to outputFile at the end of main()
  outputFile = 'Instruments.js';
  % start file with a blank line
  output = [newline];
  %% make some comment in JS file
  output = [output '//this file is generated by ' parentFolder '/' mfilename() '.m' newline newline];



  output = [output "class Instruments {" newline newline]
  output = [output "\tstatic get() {" newline newline];


  output = [output "\t\tconst serverUrl = window.location.origin;" newline newline ];
  output = [output "\t\tconst instruments = new Map();" newline newline ];


  %working directory with all samples in subfolders
  mainDir=pwd;

  %external samples stored in
  externalLibrary = 'external';
  libraries{1} = externalLibrary;

  %my own samples stored in
  myLibrary = 'mine';
  libraries{2} = myLibrary;



  for l=1:length(libraries);
    library = libraries{l};
    cd(library);


    %get list of instrument folders, temporarily stored to instruments.tmp
    system("find ./ -type d > instruments.tmp"); % this is simpler than using octaves internal directory reading
    fid = fopen('instruments.tmp');
    instruments = textscan(fid,'%s'){1}(2:end);
    fclose(fid);
    system('rm instruments.tmp');


    for i=1:length(instruments)
      instrument = instruments{i}(3:end);
      displayName = strrep(instrument,"-"," ");
      displayName =  capitalize(displayName);


      output = [ output "\t\t/////////" newline];
      output = [ output "\t\t// " displayName ' ( ' parentFolder '/' library '/' instrument '/ )' newline];
      if (i == 1 && l == 1)
        output = [ output "\t\tlet "];
      else
        output = [output "\t\t"];
      end
      output = [ output "\tinstrument  = {" newline];


      cd(instrument);
      %loop through samples
      samples = glob(['*.mp3']);



      output = [output "\t\t\tdisplayName: '" displayName "'," newline];
      output = [output "\t\t\tsampleNumber: '" num2str(length(samples)) "'," newline ];
      output = [output "\t\t\tbaseUrl: serverUrl + '/" parentFolder "/" library "/" instrument "/'," newline];
      output = [output "\t\t\tattack: 0.01," newline];
      output = [output "\t\t\trelease: 0.3," newline];
      output = [output "\t\t\tbuffer: null," newline];
      output = [output "\t\t\tisBuffering: false," newline];
      output = [output "\t\t\tisBuffered: false," newline];



      output = [ output "\t\t\turls: {" newline];

      for j=1:length(samples)
        sample = samples{j};
        if (isempty(regexp(sample," ")));
          note = ["'" strrep(sample(1:end-4),"s","#") "'"];
          output = [output "\t\t\t\t" note ": '" sample "'," newline ];
        end

      end
      output = [output "\t\t\t}," newline];

      output = [output "\t\t};" newline newline];
      output = [output "\t\tinstruments.set('" displayName "',instrument);"];

      cd([mainDir '/' library]);
      output = [output newline newline newline];


    end
    cd(mainDir); % not needed actually, but just to make sure
  end

  output = [output "\t\treturn instruments;" newline];
  output = [output "\t}"];
  output = [output "}"];
  output = [output newline newline newline];


  cd(mainDir);
  %write
  fid = fopen(outputFile,'w');
  fwrite(fid,output);
  fclose(fid);


end




function outputString = capitalize(inputString)
  %   Capitalize first character and any character after whitespace.
  %   outputString = capitalize(inputString)
  %   Accepts char vectors or string scalars. Returns same type as input.

  if isstring(inputString)
    isStr = true;
    s = char(inputString);
  else
    isStr = false;
    s = inputString;
  end

  if isempty(s)
    outputString = inputString; return;
  end

  % normalize to lower-case first
  s = lower(s);

  % Uppercase first character (if it's a letter)
  s(1) = upper(s(1));

  % Uppercase any character that follows whitespace
  for k = 2:numel(s)
    if isspace(s(k-1))
      s(k) = upper(s(k));
    end
  end

  if isStr
    outputString = string(s);
  else
    outputString = s;
  end
end


%%%%%%%%%%%%%%%%%%%
% run main()

main