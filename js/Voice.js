
/**
 voice specific properties, parameters and object references 
 * 
 * @class
 * @name Voice
 * @kind class
 */
class Voice {


    /**
     * unique voice identification number
     * @type {number}
     */

    static id = 0;


    constructor() {
        /**
         * unique id
         * @type {number}
         */
        this.id = Voice.id;
        /**
         * iterate global id
         */
        Voice.id++;

        /**
         * tabId refers to position in stave, mixer, and arrays storing voice-properties
         * @type {number}
         */
        this.tabId = null;


        /**
         * true if this voice is currently selected
         * @type {boolean}
         */
        this.isActive = null;


        /**
         * stores eventListeners objects for removal on voice deletion
         * See {@link storeEventListener() }
         * @type {array}
         */
        this.eventListeners = [];

        /**
         * stores initial name generated by {@link Name} as fallBack if {@link name} is empty
         * @type {string}
         */
        this.initialName = Name.generate();

        /**
         * voice name is set to intitial on voice creation
         */

        this.name = this.initialName;


        /**
         * HTMLdiv displaying this voices {@link name} in {@link Interval.matrix.panel}
         * this property is set by {@link Interval.updateMatrix}
         * @type {object}
         */
        this.intervalMatrixNameLabel = null;

        /**
         * HTMLdiv displaying this voices {@link name} in {@link Channel.panel}
         * this property is set by {@link Channel.createPanel}
         * @type {object}
         */
        this.mixerNameLabel = null;


        /**
         * HTMLdiv displaying this voices {@link name} in {@link NoteSheet.panel}
         * this property is set by {@link NoteSheet.updateNameLabels}
         * @type {object}
         */
        this.noteSheetNameLabel = null;



        //vexflow stuff
        this.stave = null;
        this.vexFlowVoice = null;
        this.staveOffsetX = null;
        this.staveOffsetY = null;
        this.tuplets = null;
        this.beams = null;

        this.staveNotes = null;


        this.noteSheetKey = Choir.noteSheetKey;
        this.clef = "treble";

        // // scale select stuff
        this.scaleType = Choir.scaleType;
        this.root = Tone.Frequency(this.noteSheetKey + "4").toMidi();
        this.scale = Music.getScale(this.scaleType, this.root);


        this.part = null;
        this.highlightPart = null;

        this.playEvents = null;
        this.lastPlayEvent = null;
        this.totalDuration = 0;


        this.tabLink = null;
        this.tabPane = null;


        this.noteInput = null;
        this.noteString = '';
        this.noteStringCorrected = '';




        this.voiceRange = ["C2", "B5"]; //
        // this.voiceRangeLabel = this.voiceRange.join(' - ');
        // this.klaviatur.notenbereichAnzeige.textContent = "C2 - B5";
        this.klaviatur = null;
        this.scaleSelector = null;

        this.voiceRangeMidi = [36, 83];
        // this.noteCandidates;

        // // disjunction and voice coipling
        this.disjunction = 200;
        this.voiceCoupling = 2000; //potential depth


        // // rhythm lock stuff
        this.rhythmLockId = -2;//
        this.rhythmSelector = null;

        this.randomRhythmDurationInBeats = NoteParser.maxTotalDuration * 4;


        // // instrument
        this.muted = 0;
        this.solo = 0;

        // // this.attack = 0.035;
        // this.attack = 0.035;

        this.instrument = "Piano";
        this.sampler = new Tone.Sampler();



        this.voiceRemoveButton = null;
        this.generateButton = null;

    }




    storeEventListener(div, eventString, functionReference) {
        const eventListener = {
            div: div,
            eventString: eventString,
            functionReference: functionReference
        }
        this.eventListeners.push(eventListener);
    }


    removeAllEventListeners() {
        this.eventListeners.forEach(listener => {
            const divWithListener = listener.div;
            divWithListener.removeEventListener(listener.eventString, listener.functionReference)
        });
    }


    setScale(scaleType, root) {
        this.scaleType = scaleType;
        this.root = root;
        this.scale = Music.getScale(this.scaleType, this.root);
    }





    setNoteString(noteString) {
        this.noteString = noteString;
        this.noteInput.value = noteString;
        Choir.draw()
    }

    correctNoteInput() {
        this.noteString = this.noteStringCorrected;
        this.noteInput.value = this.noteStringCorrected;
    }






}


